#include <opencv2/highgui.hpp>
#include <opencv2/aruco.hpp>
#include <iostream>
#include "ardrone/ardrone.h"
#include "pid.hpp"
#include <cstring>
using namespace std;
using namespace cv;
// --------------------------------------------------------------------------
// main(Number of arguments, Argument values)
// Description  : This is the entry point of the program.
// Return value : SUCCESS:0  ERROR:-1
// --------------------------------------------------------------------------

static bool readCameraParameters(string filename, Mat &camMatrix, Mat &distCoeffs) {
    FileStorage fs(filename, FileStorage::READ);
    if(!fs.isOpened())
        return false;
    fs["intrinsic"] >> camMatrix;
    fs["distortion"] >> distCoeffs;
    return true;
}


int main(int argc, char *argv[])
{
    //AR.Drone class
    PIDManager PID("pid.yaml");
    
    ARDrone ardrone;
    
    // Initialize
    if (!ardrone.open()) {
        std::cout << "Failed to initialize." << std::endl;
        return -1;
    }
    
    
    // Battery
    std::cout << "Battery = " << ardrone.getBatteryPercentage() << "[%]" << std::endl;
    
    // Instructions
    std::cout << "***************************************" << std::endl;
    std::cout << "*       CV Drone sample program       *" << std::endl;
    std::cout << "*           - How to play -           *" << std::endl;
    std::cout << "***************************************" << std::endl;
    std::cout << "*                                     *" << std::endl;
    std::cout << "* - Controls -                        *" << std::endl;
    std::cout << "*    'Space' -- Takeoff/Landing       *" << std::endl;
    std::cout << "*    'Up'    -- Move forward          *" << std::endl;
    std::cout << "*    'Down'  -- Move backward         *" << std::endl;
    std::cout << "*    'Left'  -- Turn left             *" << std::endl;
    std::cout << "*    'Right' -- Turn right            *" << std::endl;
    std::cout << "*    'Q'     -- Move upward           *" << std::endl;
    std::cout << "*    'A'     -- Move downward         *" << std::endl;
    std::cout << "*                                     *" << std::endl;
    std::cout << "* - Others -                          *" << std::endl;
    std::cout << "*    'C'     -- Change camera         *" << std::endl;
    std::cout << "*    'Esc'   -- Exit                  *" << std::endl;
    std::cout << "*                                     *" << std::endl;
    std::cout << "***************************************" << std::endl;
    

    float markerLength = 12.3;
    ///Mat image = ardrone.getImage();
    Mat cameraMatrix, distCoeffs;
    readCameraParameters("camera.xml", cameraMatrix, distCoeffs);
    cout << cameraMatrix << endl;
    ///cout << distCoeffs << endl;
    
    ///cv::VideoCapture cap(0);
    int time=0;
    Ptr<aruco::Dictionary> dictionary = aruco::getPredefinedDictionary(aruco::DICT_6X6_250);

    while (1) {
        
        // Key input
        int key = cv::waitKey(33);
        if (key == 0x1b) break;
        
        // Get an image
        cv::Mat image = ardrone.getImage();
        ///cv::Mat image;
        ///cap >> image;
        
        // Take off / Landing
        if (key == ' ') {
            if (ardrone.onGround()) ardrone.takeoff();
            else                    ardrone.landing();
        }
        
        // Move
        double vx = 0.0, vy = 0.0, vz = 0.0, vr = 0.0;
        if (key == 'i' || key == CV_VK_UP)    vx =  1.0;
        if (key == 'k' || key == CV_VK_DOWN)  vx = -1.0;
        if (key == 'u' || key == CV_VK_LEFT)  vr =  1.0;
        if (key == 'o' || key == CV_VK_RIGHT) vr = -1.0;
        if (key == 'j') vy =  1.0;
        if (key == 'l') vy = -1.0;
        if (key == 'q') vz =  1.0;
        if (key == 'a') vz = -1.0;
        
        // Change camera
        static int mode = 0;
        if (key == 'c') ardrone.setCamera(++mode % 4);
        
        Mat imageCopy;
        ///inputVideo.retrieve(image);
        ///image1 = ardrone.getImage();
        if(image.empty()){
            continue;
        }
        image.copyTo(imageCopy);
        vector<int> ids; vector<vector<Point2f> > corners;
        aruco::detectMarkers(image, dictionary, corners, ids);
        vector< Vec3d > rvecs, tvecs;
        // if at least one marker detected
        if (ids.size() > 0){
            //cout << "found" << endl;
            aruco::drawDetectedMarkers(imageCopy, corners, ids);
            
            aruco::estimatePoseSingleMarkers(corners, markerLength, cameraMatrix, distCoeffs, rvecs, tvecs);
            cout<<endl<<rvecs[0][0]<<" "<<rvecs[0][1]<<" "<<rvecs[0][2]<<endl<<rvecs[0][0]*rvecs[0][2];
            for(int i=0; i<ids.size(); i++)
                
                cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], 0.1);
            
            if (key == -1 && tvecs.size() ) {
                // implement your autopilot algorithm here
                // only need to modify vx, vy, vz, vr
                Mat _error = Mat(4, 1, CV_64F);
                //_error = {tvecs[0][2]-80, tvecs[0][0]-0, tvecs[0][1]-0, rvecs[0][0]-0};
                _error.at<double>(0, 0)=tvecs[0][2]-80;
                _error.at<double>(1, 0)=tvecs[0][0]-0;
                _error.at<double>(2, 0)=tvecs[0][1]-0;
                if(rvecs[0][0]<0)
                    _error.at<double>(3, 0)= -(rvecs[0][2]-0);
                else
                    _error.at<double>(3, 0)= (rvecs[0][2]-0);
                Mat _output;
                cout << "***" << endl;
                cout << _error << endl;
                PID.getCommand(_error, _output);
                cout << "---" << endl;
                
                
                //vx
                else{
                if(_output.at<double>(0, 0)<=5 && _output.at<double>(0,0)>(-5)){
                    vx=0;
                }else if(_output.at<double>(0, 0)<=20 && _output.at<double>(0,0)>(-20)){
                    vx=_output.at<double>(0, 0)/170;
                }else if(_output.at<double>(0, 0)<=70 && _output.at<double>(0,0)>(-70)){
                    vx=_output.at<double>(0, 0)/200;
                }else if(_output.at<double>(0, 0)<=200 && _output.at<double>(0,0)>(-200)){
                    vx=_output.at<double>(0, 0)/200;
                }
                }
                //vr
                    //vr=_output.at<double>(3, 0)/1.8;
               if(_output.at<double>(3, 0)<=0.2 && _output.at<double>(3,0)>(-0.2)){
                    vr=0;
                }else if(_output.at<double>(3, 0)<=0.5 && _output.at<double>(3,0)>(-0.5)){
                    if(_output.at<double>(3,0)>0)
                        vr=_output.at<double>(3,0)/2.3;
                    else
                        vr=_output.at<double>(3, 0)/4;
                }else if(_output.at<double>(3, 0)<=1.1 && _output.at<double>(3,0)>(-1.1)){
                    if(_output.at<double>(3,0)>0)
                        vr=_output.at<double>(3,0)/2;
                    else
                        vr=_output.at<double>(3, 0)/3.5;
                }else if(_output.at<double>(3, 0)<=1.8 && _output.at<double>(3,0)>(-1.8)){
                    if(_output.at<double>(3,0)>0)
                        vr=_output.at<double>(3,0)/1.7;
                    else
                        vr=_output.at<double>(3, 0)/3;
                }else
                        vr=_output.at<double>(3, 0)/2.3;
                }
                cout<<_output.at<double>(3, 0)<<endl<<time;
                //cout << _output << endl;
                vy=0;vz=0;vr=0;
                
                
            }
        }
        
        ardrone.move3D(vx, vy, vz, vr);
        
        
        // Display the image
        cv::imshow("camera", image);
    }
    
    // See you
    ardrone.close();
    
    return 0;
}